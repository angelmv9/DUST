@model DUST.Models.Company

@using DUST.Services.Interfaces
@using DUST.Models.Enums
@using Microsoft.AspNetCore.Identity
@using System.Collections.Generic

@inject IProjectService ProjectService
@inject ITicketService TicketService
@inject UserManager<DUSTUser> UserManager

@{
    ViewData["Title"] = "Company Details";
    List<Project> activeProjects = await ProjectService.GetAllActiveProjectsByCompanyAsync(Model.Id);
}

<h1>@Model.Name</h1>
<p>@Model.Description</p>

<h2>Projects</h2>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Project Manager</th>
            <th>Members</th>
            <th>Open Tickets</th>
            <th>Tickets In Progress</th>
            <th>Tickets Being Tested</th>
            <th>Tickets Sent to Retest</th>
            <th>Tickets Fixed</th>
            <th>Tickets Closed</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var project in activeProjects)
        {           
            string pmName = (await ProjectService.GetProjectManagerAsync(project.Id))?.FullName;
            int totalMembers = (await ProjectService.GetAllProjectMembersExceptPMAsync(project.Id)).Count;
            int open = (await TicketService.GetProjectTicketsByStatusAsync(TicketStatusEnum.Open.ToString(),project.CompanyId,project.Id)).Count;
            int inProgress = (await TicketService.GetProjectTicketsByStatusAsync(TicketStatusEnum.In_Progress.ToString(), project.CompanyId, project.Id)).Count;
            int testing = (await TicketService.GetProjectTicketsByStatusAsync(TicketStatusEnum.Testing.ToString(), project.CompanyId, project.Id)).Count;
            int retest = (await TicketService.GetProjectTicketsByStatusAsync(TicketStatusEnum.Retest.ToString(), project.CompanyId, project.Id)).Count;
            int fixedTickets = (await TicketService.GetProjectTicketsByStatusAsync(TicketStatusEnum.Fixed.ToString(), project.CompanyId, project.Id)).Count;
            int closed = (await TicketService.GetProjectTicketsByStatusAsync(TicketStatusEnum.Closed.ToString(), project.CompanyId, project.Id)).Count;

            <tr>
                <td>
                    @Html.DisplayFor(modelItem => project.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => pmName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => totalMembers)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => open)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => inProgress)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => testing)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => retest)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => fixedTickets)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => closed)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => project.StartDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => project.EndDate)
                </td>
                <td>
                    <a asp-controller="Projects" asp-action="Details" asp-route-id="@project.Id">View</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<h3>Company Members</h3>

<div class="container">
    <div class="row row-cols-4">
        <div class="col">
            <table class="table table-borderless">
                <thead class="table-primary">
                    <tr>
                        <th>Administrators</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var member in Model.Members)
                    {
                        if (await UserManager.IsInRoleAsync(member, RolesEnum.Admin.ToString()))
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => member.FullName)
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

        </div>
        <div class="col">
            <table class="table table-borderless">
                <thead class="table-info">
                    <tr>
                        <th>Project Managers</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var member in Model.Members)
                    {
                        if (await UserManager.IsInRoleAsync(member, RolesEnum.ProjectManager.ToString()))
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => member.FullName)
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

        </div>
        <div class="col">
            <table class="table table-borderless">
                <thead class="table-info">
                    <tr>
                        <th>Developers</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var member in Model.Members)
                    {
                        if (await UserManager.IsInRoleAsync(member, RolesEnum.Developer.ToString()))
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => member.FullName)
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

        </div>
        <div class="col">
            <table class="table table-borderless">
                <thead class="table-info">
                    <tr>
                        <th>Submitters</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var member in Model.Members)
                    {
                        if (await UserManager.IsInRoleAsync(member, RolesEnum.Submitter.ToString()))
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => member.FullName)
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<h3>Invites</h3>

<table class="table table-dark">
    <thead>
        <tr>
            <th>Invitee Name</th> <th>Email</th> <th>Project</th> <th>Invite Date</th> <th>Expires On</th> <th>Invited By</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var invite in Model.Invites)
        {
            string inviteeFullName = invite.InviteeFirstName + ' ' + invite.InviteeLastName;
            DateTime expiration = invite.InviteDate.DateTime.AddDays(7);
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => inviteeFullName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => invite.InviteeEmail)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => invite.Project.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => invite.InviteDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => expiration)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => invite.Invitor.FullName)
                </td>
            </tr>
        }
    </tbody>
</table>