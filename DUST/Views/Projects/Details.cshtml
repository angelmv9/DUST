@model DUST.Models.Project
@using DUST.Models.Enums
@using DUST.Services.Interfaces
@using Microsoft.AspNetCore.Identity

@inject UserManager<DUSTUser> UserManager
@inject IProjectService ProjectService
@inject ITicketHistoryService HistoryService
@inject ITicketService TicketService

@{
    ViewData["Title"] = "Project Details";
    DUSTUser currentUser = await UserManager.GetUserAsync(User);
    DUSTUser projectManager = await ProjectService.GetProjectManagerAsync(Model.Id);
    bool isUserProjectPM = projectManager?.Id == currentUser.Id;

    // Progress bar and status calculations
    var start = Model.StartDate.DateTime;
    var end = Model.EndDate.DateTime;
    var today = DateTime.Now;
    var percent = today >= end ? 100 : today < start ? 0 : Math.Round((today.Subtract(start)) / (end.Subtract(start)) * 100);

    var totalDevelopers = (await ProjectService.GetProjectMembersByRoleAsync(Model.Id, nameof(RolesEnum.Developer))).Count;
    var totalSubmitters = (await ProjectService.GetProjectMembersByRoleAsync(Model.Id, nameof(RolesEnum.Submitter))).Count;
    var totalPMs = projectManager != null ? 1 : 0;
}

<!DOCTYPE html>
<html lang="en-US" dir="ltr">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>


<body>

    <!-- ===============================================-->
    <!--    Main Content-->
    <!-- ===============================================-->
    <div class="content px-0 pt-9">
        @* Left Panel *@
        <div class="row g-0">
            <div class="col-12 col-xxl-8 px-0 bg-soft">
                <div class="px-4 px-lg-6 pt-6 pb-9">
                    @* Project Name, dropdown menu, Active/Inactive badge*@
                    <div class="mb-5">
                        <div class="d-flex justify-content-between">
                            <h2 class="text-black fw-bolder mb-2">@Model.Name</h2>
                            @* dropdown menu*@
                            <div class="font-sans-serif btn-reveal-trigger">
                                <button class="btn btn-sm dropdown-toggle dropdown-caret-none transition-none btn-reveal" type="button" data-bs-toggle="dropdown" data-boundary="window" aria-haspopup="true" aria-expanded="false" data-bs-reference="parent"><span class="fas fa-ellipsis-h"></span></button>
                                <div class="dropdown-menu dropdown-menu-end py-2">
                                    <a class="dropdown-item" asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
                                    @if (User.IsInRole(nameof(RolesEnum.Admin)) || isUserProjectPM)
                                    {
                                        <div class="dropdown-divider"></div>
                                        @if (!@Model.Archived)
                                        {
                                            <a class="dropdown-item text-danger" asp-action="Archive" asp-route-id="@Model.Id">Archive</a>
                                        }
                                        else
                                        {
                                            <a class="dropdown-item text-success" asp-action="Restore" asp-route-id="@Model.Id">Restore</a>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                        @if (today < end && today >= start)
                        {
                            <span class="badge badge-phoenix badge-phoenix-success">Active<span class="ms-1 uil uil-heart-rate"></span></span>
                        }
                        else
                        {
                            <span class="badge badge-phoenix badge-phoenix-primary">Inactive<span class="ms-1 uil uil-stopwatch"></span></span>
                        }
                    </div>
                    @* PM Info, Project progress*@
                    <div class="row gx-0 gx-sm-5 gy-8 mb-8">
                        <div class="col-12 col-md-6 col-xl-5 pe-xl-0">
                            <div class="mb-4 mb-xl-7">
                                <div class="row gx-0 gx-sm-7">
                                    @* PM Info*@
                                    <div class="col-12 col-sm-auto">
                                        <table class="lh-sm mb-4 mb-sm-0 mb-xl-4">
                                            <tbody>
                                                @* PM Name, assign PM button*@
                                                <tr>
                                                    <td class="align-top py-1">
                                                        <div class="d-flex">
                                                            <span class="fa-solid fa-user me-2 text-700 fs--1"></span>
                                                            <h5 class="text-900 mb-0 text-nowrap">PM :</h5>
                                                        </div>
                                                    </td>
                                                    @{
                                                        var PMfullName = projectManager?.FullName ?? "NONE ASSIGNED";
                                                    }
                                                    <div class="d-flex align-items-center">
                                                        <td class="ps-1 py-1">
                                                            <span class="fw-semi-bold d-block lh-sm" href="#!">@PMfullName</span>
                                                                @if (User.IsInRole(nameof(RolesEnum.Admin)) && projectManager == null)
                                                                {
                                                                    <a class="fw-bold fs--1" asp-controller="Projects" asp-action="AssignPM" asp-route-projectId="@Model.Id">Assign PM<span class="fa-solid fa-chevron-right mx-1 fs--2"></span></a>
                                                                }
                                                        </td>
                                                    </div>
                                                </tr>
                                                @* PM Email*@
                                                <tr>
                                                    <td class="align-top py-1">
                                                        <div class="d-flex">
                                                            <span class="fa-regular fa-envelope me-2 text-700 fs--1"></span>
                                                            <h5 class="text-900 mb-0 text-nowrap">Email : </h5>
                                                        </div>
                                                    </td>
                                                    <td class="fw-semi-bold ps-1 py-1">@projectManager?.Email</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                    @* Project Progress *@
                                    <div class="col-12 col-sm-auto">
                                        <table class="lh-sm">
                                            <tbody>
                                                <tr>
                                                    <td class="align-top py-1 text-900 text-nowrap fw-bold">Start Date : </td>
                                                    <td class="text-600 fw-semi-bold ps-3">@Model.StartDate.ToString("dd MMM, yyyy")</td>
                                                </tr>
                                                <tr>
                                                    <td class="align-top py-1 text-900 text-nowrap fw-bold">Deadline :</td>
                                                    <td class="text-600 fw-semi-bold ps-3">@Model.EndDate.ToString("dd MMM, yyyy")</td>
                                                </tr>
                                                <tr>
                                                    <td class="align-top py-1 text-900 text-nowrap fw-bold">Progress :</td>
                                                        @if (percent > 99.99)
                                                        {
                                                            <td class="text-success fw-semi-bold ps-3">@percent%</td>
                                                        }
                                                        else
                                                        {
                                                            <td class="text-warning fw-semi-bold ps-3">@percent%</td>
                                                        }
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                            </div>
                        </div>
                    </div>
                    @* Echarts tickets over time*@
                    <div class="col-12 col-md-6 col-xl-7">
                        <div class="row flex-between-center mb-3 g-3">
                            <div class="col-auto">
                                <h4 class="text-black">
                                    Tickets completed over time <span class="badge badge-phoenix ms-2 fs--2 badge-phoenix-warning"><span class="fw-bold">Coming soon!</span><span class="fa-solid fa-star ms-1"></span></span>
                                </h4>
                                <p class="text-700 mb-0">Is your team on track?</p>
                            </div>
                            <div class="col-8 col-sm-4">
                                <select class="form-select form-select-sm">
                                    <option>April 1 - 30, 2023</option>
                                    <option>May 1 - 31, 2023</option>
                                    <option>June 1 - 30, 2023</option>
                                </select>
                            </div>
                        </div>
                        <div class="echart-completed-task-chart" data-echart-responsive="data-echart-responsive" style="min-height:200px;width:100%"></div>
                    </div>
                    @* Echarts Roles Split*@
                    <div class="col-12 col-sm-5 col-lg-4 col-xl-3 col-xxl-4">
                        <div class="mb-5">
                            <h4 class="text-black">Roles Split</h4>
                        </div>
                        <div class="echart-roles-split mb-5" style="height:115px;width:100%;"></div>
                        <div class="row justify-content-center">
                            <div class="col-auto col-sm-12">
                                <div class="row justify-content-center justify-content-sm-between g-5 g-sm-0 mb-2">
                                    <div class="col">
                                        <div class="d-flex align-items-center">
                                            <div class="bullet-item me-2 bg-primary"></div>
                                            <h6 class="text-900 fw-semi-bold flex-1 mb-0">Developers</h6>
                                        </div>
                                    </div>
                                    <div class="col-auto">
                                        <h6 class="text-900 fw-semi-bold mb-0">@totalDevelopers</h6>
                                    </div>
                                </div>
                                <div class="row justify-content-center justify-content-sm-between g-5 g-sm-0 mb-2">
                                    <div class="col">
                                        <div class="d-flex align-items-center">
                                            <div class="bullet-item me-2 bg-primary-200"></div>
                                            <h6 class="text-900 fw-semi-bold flex-1 mb-0">Project Managers</h6>
                                        </div>
                                    </div>
                                    <div class="col-auto">
                                        <h6 class="text-900 fw-semi-bold mb-0">@totalPMs</h6>
                                    </div>
                                </div>
                                <div class="row justify-content-center justify-content-sm-between g-5 g-sm-0 mb-2">
                                    <div class="col">
                                        <div class="d-flex align-items-center">
                                            <div class="bullet-item me-2 bg-primary-300"></div>
                                            <h6 class="text-900 fw-semi-bold flex-1 mb-0">Submitters</h6>
                                        </div>
                                    </div>
                                    <div class="col-auto">
                                        <h6 class="text-900 fw-semi-bold mb-0">@totalSubmitters</h6>
                                    </div>
                                </div>
                                <div class="row justify-content-center justify-content-sm-between g-5 g-sm-0 mb-2">
                                    <div class="col">
                                        <div class="d-flex align-items-center">
                                            <div class="bullet-item me-2 bg-info"></div>
                                            <h6 class="text-900 fw-semi-bold flex-1 mb-0">Admins</h6>
                                        </div>
                                    </div>
                                    <div class="col-auto">
                                        <h6 class="text-900 fw-semi-bold mb-0">1</h6>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                    @* Team Members*@
                    <div class="col-12 col-sm-7 col-lg-8 col-xl-5">
                        <div class="d-flex align-items-center">
                            <h4 class="text-1100 mb-4">Team members</h4>
                                @if (User.IsInRole(nameof(RolesEnum.Admin)) || isUserProjectPM)
                                {
                                    <a class="fw-bold fs--1 mb-4 ms-2" asp-action="AssignMembers" asp-route-projectId="@Model.Id">Manage<span class="fa-solid fa-chevron-right mx-1 fs--2"></span></a>
                                }
                        </div>
                        <div class="d-flex mb-8">
                            @foreach (var member in Model.Members)
                            {
                                <div class="avatar avatar-xl me-1">
                                    @if (member?.AvatarByteData != null)
                                    {
                                        <img class="rounded-circle" src="data:image/*;base64,@(Convert.ToBase64String(member.AvatarByteData))" />
                                    }
                                    else
                                    {
                                        <img class="rounded-circle" src="~/img/defaultUserImage.png" />
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>

                @* Project Description*@
                <h3 class="text-1100 mb-4">Project Description</h3>
                <p class="text-800 mb-9">@Model.Description</p>

                @* Tickets Table*@
                <h3 class="text-1100 mb-4">Tickets</h3>
                <div class="table-responsive scrollbar">
                    <table class="table fs--1 mb-0 border-top border-200">
                        <thead>
                            <tr>
                                <th class="sort white-space-nowrap align-middle ps-0" scope="col" data-sort="title" style="width:25%;">
                                    TITLE
                                </th>
                                <th class="sort align-middle" scope="col" data-sort="type" style="width:5%;">
                                    TYPE
                                </th>
                                <th class="sort align-middle ps-3" scope="col" data-sort="developer" style="width:10%;">
                                    DEVELOPER
                                </th>
                                <th class="sort align-middle ps-3" scope="col" data-sort="created" style="width:5%;">
                                    CREATED
                                </th>
                                <th class="sort align-middle ps-3" scope="col" data-sort="updated" style="width:5%;">
                                    UPDATED
                                </th>
                                <th class="sort align-middle text-end" scope="col" data-sort="status" style="width:5%;">
                                    STATUS
                                </th>
                                <th class="sort align-middle text-end" scope="col" data-sort="priority" style="width:5%;">
                                    PRIORITY
                                </th>
                                <th class="sort align-middle text-end" scope="col" style="width:5%;"></th>
                            </tr>
                        </thead>
                        <tbody class="list" id="ticket-list-table-body">
                                @foreach (var ticket in Model.Tickets)
                                {
                                <tr class="position-static">
                                        @* Title *@
                                    <td class="align-middle white-space-nowrap time title ps-0 py-4">
                                        <a class="text-decoration-none fw-bold fs-0" asp-controller="Tickets" asp-action="Details" asp-route-ticketId="@ticket.Id">@ticket.Title</a>
                                    </td>
                                        @* Type *@
                                    <td class="align-middle white-space-nowrap type">
                                            @if (ticket.TicketType?.Name == nameof(TicketTypeEnum.New_Feature))
                                            {
                                            <span class="badge badge-phoenix rounded-pill fs--2 badge-phoenix-success">NEW FEATURE</span>
                                            }
                                            else if (ticket.TicketType?.Name == nameof(TicketTypeEnum.Task))
                                            {
                                            <span class="badge badge-phoenix rounded-pill fs--2 badge-phoenix-secondary">TASK</span>
                                            }
                                            else if (ticket.TicketType?.Name == nameof(TicketTypeEnum.Bug))
                                            {
                                            <span class="badge badge-phoenix rounded-pill fs--2 badge-phoenix-danger">BUG<span class="ms-1 fas fa-bug" style="height:12.8px;width:12.8px;"></span></span>
                                            }
                                            else if (ticket.TicketType?.Name == nameof(TicketTypeEnum.Change_Request))
                                            {
                                            <span class="badge badge-phoenix rounded-pill fs--2 badge-phoenix-secondary">CHANGE REQUEST</span>
                                            }
                                            else if (ticket.TicketType?.Name == nameof(TicketTypeEnum.Improvement))
                                            {
                                            <span class="badge badge-phoenix rounded-pill fs--2 badge-phoenix-warning">IMPROVEMENT</span>
                                            }
                                            else
                                            {
                                            <span class="badge badge-phoenix fs--2 rounded-pill badge-phoenix-info">TEST</span>
                                            }
                                    </td>
                                        @* Developer *@
                                    <td class="align-middle white-space-nowrap developer ps-3 py-4">
                                        <a class="d-flex align-items-center" href="#!">
                                            <div class="avatar avatar-s">
                                                <div class="avatar avatar-s  rounded-circle">
                                                        @if (ticket.DeveloperUser != null)
                                                        {
                                                            @if (ticket.DeveloperUser.AvatarByteData != null)
                                                            {
                                                            <img class="rounded-circle" src="data:image/*;base64,@(Convert.ToBase64String(ticket.DeveloperUser.AvatarByteData))" />
                                                            }
                                                            else
                                                            {
                                                            <img class="rounded-circle" src="~/img/defaultUserImage.png" />
                                                            }
                                                        }
                                                </div>
                                            </div>
                                            <p class="mb-0 ms-1 fs--1 text-900">@ticket.DeveloperUser?.FullName</p>
                                        </a>
                                    </td>
                                        @* Created *@
                                    <td class="align-middle white-space-nowrap created ps-3 py-4">
                                        <p class="mb-0 fs--1 text-900">@ticket.Created.ToString("dd MMM, yyyy")</p>
                                    </td>
                                        @* Updated *@
                                    <td class="align-middle white-space-nowrap updated ps-3 py-4">
                                        <p class="mb-0 fs--1 text-900">@ticket.Updated?.ToString("dd MMM, yyyy")</p>
                                    </td>
                                        @* Status *@
                                    <td class="align-middle white-space-nowrap text-end status">
                                            @if (ticket.TicketStatus?.Name == nameof(TicketStatusEnum.Fixed))
                                            {
                                            <span class="badge bg-warning fs--2">FIXED<span class="ms-1" data-feather="check" style="height:12.8px;width:12.8px;"></span></span>
                                            }
                                            else
                                            {
                                            <span class="badge bg-warning fs--2">@ticket.TicketStatus.Name.ToUpper()</span>
                                            }

                                    </td>
                                        @* Priority *@
                                    <td class="align-middle white-space-nowrap text-end priority">
                                            @if (ticket.TicketPriority?.Name == nameof(TicketPriorityEnum.Urgent))
                                            {
                                            <span class="badge badge-phoenix fs--2 badge-phoenix-danger">URGENT<span class="ms-1" data-feather="alert-octagon" style="height:12.8px;width:12.8px;"></span></span>
                                            }
                                            else if (ticket.TicketPriority?.Name == nameof(TicketPriorityEnum.High))
                                            {
                                            <span class="badge badge-phoenix fs--2 badge-phoenix-warning">HIGH</span>
                                            }
                                            else if (ticket.TicketPriority?.Name == nameof(TicketPriorityEnum.Medium))
                                            {
                                            <span class="badge badge-phoenix fs--2 badge-phoenix-primary">MEDIUM</span>
                                            }
                                            else
                                            {
                                            <span class="badge badge-phoenix fs--2 badge-phoenix-secondary">LOW</span>
                                            }
                                    </td>
                                        @* Menu *@
                                    <td class="align-middle text-end white-space-nowrap pe-0 action">
                                        <div class="font-sans-serif btn-reveal-trigger position-static">
                                            <button class="btn btn-sm dropdown-toggle dropdown-caret-none transition-none btn-reveal fs--2" type="button" data-bs-toggle="dropdown" data-boundary="window" aria-haspopup="true" aria-expanded="false" data-bs-reference="parent"><span class="fas fa-ellipsis-h fs--2"></span></button>
                                            <div class="dropdown-menu dropdown-menu-end py-2">
                                                <a class="dropdown-item" asp-controller="Tickets" asp-action="Details" asp-route-ticketId="@ticket.Id">View</a>
                                                    @if ((User.IsInRole(nameof(RolesEnum.Admin)) ||
                                                   isUserProjectPM ||
                                                   ticket.DeveloperUserId == currentUser.Id ||
                                                   ticket.OwnerUserId == currentUser.Id) &&
                                                   !ticket.ArchivedByProject && !ticket.Archived)
                                                    {
                                                    <a class="dropdown-item" asp-controller="Tickets" asp-action="Edit" asp-route-id="@ticket.Id">Edit</a>
                                                    }
                                                    @if (User.IsInRole(nameof(RolesEnum.Admin)) || isUserProjectPM)
                                                    {
                                                    <div class="dropdown-divider">
                                                    </div>
                                                        @if (!ticket.Archived && !ticket.ArchivedByProject)
                                                        {
                                                        <a class="dropdown-item text-danger" asp-controller="Tickets" asp-action="Archive" asp-route-id="@ticket.Id">Archive</a>
                                                        }
                                                        @if (ticket.Archived && !ticket.ArchivedByProject)
                                                        {
                                                        <a class="dropdown-item text-success" asp-controller="Tickets" asp-action="Restore" asp-route-id="@ticket.Id">Restore</a>
                                                        }
                                                    }
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                                }
                        </tbody>
                    </table>
                </div>
                <div class="d-flex flex-wrap align-items-center justify-content-between py-3 pe-0 fs--1 border-bottom border-200">
                    <div class="d-flex">
                        <p class="mb-0 d-none d-sm-block me-3 fw-semi-bold text-900" data-list-info="data-list-info"></p><a class="fw-semi-bold" href="#!" data-list-view="*">View all<span class="fas fa-angle-right ms-1" data-fa-transform="down-1"></span></a><a class="fw-semi-bold d-none" href="#!" data-list-view="less">View Less<span class="fas fa-angle-right ms-1" data-fa-transform="down-1"></span></a>
                    </div>
                    <div class="d-flex">
                        <button class="page-link" data-list-pagination="prev"><span class="fas fa-chevron-left"></span></button>
                        <ul class="mb-0 pagination"></ul>
                        <button class="page-link pe-0" data-list-pagination="next"><span class="fas fa-chevron-right"></span></button>
                    </div>
                </div>
            </div>
        </div>
        @* Right Panel: Project Activity*@
        <div class="col-12 col-xxl-4 px-0 border-start-xxl border-300 border-top-sm">
            <div class="h-100">
                <div class="bg-light dark__bg-1100 h-100">
                    <div class="p-4 p-lg-6">
                        <h3 class="text-1000 mb-4 fw-bold">Recent activity</h3>
                        <div class="timeline-vertical timeline-with-details">
                                @{
                                    List<TicketHistory> ticketsHistories = await HistoryService.GetProjectTicketsHistoriesAsync(Model.Id, currentUser.CompanyId);
                                    var historyCount = ticketsHistories.Count;
                                    var historyItem = 0;
                                }
                                @foreach (TicketHistory history in ticketsHistories)
                                {

                                    historyItem += 1;

                                <div class="timeline-item position-relative">
                                    <div class="row g-md-3">
                                        <div class="col-12 col-md-auto d-flex">
                                            <div class="timeline-item-date order-1 order-md-0 me-md-4">
                                                <p class="fs--2 fw-semi-bold text-600 text-end">@history.Created.ToString("dd MMM yyyy")<br class="d-none d-md-block" /> @history.Created.ToString("h:mm tt")</p>
                                            </div>
                                            <div class="timeline-item-bar position-md-relative me-3 me-md-0 border-400">
                                                    @{
                                                        var faIcon = history.Property.Equals(String.Empty) ? "fa-square-plus" :
                                                        history.Property.Equals("Title") ? "fa-file-lines" :
                                                        history.Property.Equals("Description") ? "fa-file-lines" :
                                                        history.Property.Equals("TicketPriority") ? "fa-star" :
                                                        history.Property.Equals("TicketStatus") ? "fa-list-check" :
                                                        (history.Property.Equals("TicketType") && history.NewValue.Equals(nameof(TicketTypeEnum.Bug))) ? "fa-bugs" :
                                                        (history.Property.Equals("TicketType") && history.NewValue.Equals(nameof(TicketTypeEnum.Improvement))) ? "fa-sparkles" :
                                                        history.Property.Equals("TicketType") ? "fa-filter" :
                                                        history.Property.Equals("DeveloperUser") ? "fa-user" :
                                                        history.Property.Equals("TicketComment") ? "fa-comments" :
                                                        history.Property.Equals("TicketAttachment") ? "fa-file-circle-plus" : "fa-circle-sort";

                                                    }
                                                <div class="icon-item icon-item-sm rounded-7 shadow-none bg-primary-100"><span class="fa-solid @faIcon text-primary-600 fs--2 dark__text-primary-300"></span></div>
                                                    @if (historyItem != historyCount)
                                                    {
                                                    <span class="timeline-bar border-end border-dashed border-400"></span>
                                                    }
                                            </div>
                                        </div>
                                        <div class="col">
                                            <div class="timeline-item-content ps-6 ps-md-3">
                                                <h5 class="fs--1 lh-sm">@history.Description</h5>
                                                <p class="fs--1">by <span class="fw-semi-bold text-primary">@history.User.FullName</span></p>
                                                    @{
                                                        var ticketTitle = (await TicketService.GetTicketByIdAsync(history.TicketId)).Title;
                                                    }
                                                <p class="fs--1 text-800 lh-sm"><b>Ticket: </b>@ticketTitle</p>
                                                    @if ((!history.Property.Equals("TicketAttachment") || !history.Property.Equals("TicketComment")) && !history.Description.Equals("New ticket created"))
                                                    {
                                                    <p class="fs--1 text-800 lh-sm"><b>Old: </b>@history.OldValue</p>
                                                    <p class="fs--1 text-800 lh-sm mb-5"><b>New: </b>@history.NewValue</p>
                                                    }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        </div>            
    </div>
    <!-- ===============================================-->
    <!--    End of Main Content-->
    <!-- ===============================================-->
    @section scripts {
      
        @* Echarts*@       
        <script>
            (function (factory) {
                typeof define === 'function' && define.amd ? define(factory) :
                    factory();
            })((function () {
                'use strict';

                // import * as echarts from 'echarts';
                const { merge } = window._;

                // form config.js
                const echartSetOption = (chart, userOptions, getDefaultOptions) => {
                    const themeController = document.body;
                    // Merge user options with lodash
                    chart.setOption(merge(getDefaultOptions(), userOptions));

                    themeController.addEventListener(
                        'clickControl',
                        ({ detail: { control } }) => {
                            if (control === 'phoenixTheme') {
                                chart.setOption(window._.merge(getDefaultOptions(), userOptions));
                            }
                        }
                    );
                };
                // -------------------end config.js--------------------

                const resizeEcharts = () => {
                    const $echarts = document.querySelectorAll('[data-echart-responsive]');

                    if ($echarts.length > 0) {
                        $echarts.forEach(item => {
                            const echartInstance = echarts.getInstanceByDom(item);
                            echartInstance?.resize();
                        });
                    }
                };

                const navbarVerticalToggle = document.querySelector('.navbar-vertical-toggle');
                navbarVerticalToggle &&
                    navbarVerticalToggle.addEventListener('navbar.vertical.toggle', e => {
                        return resizeEcharts();
                    });

                /* -------------------------------------------------------------------------- */
                /*                             Echarts Total Sales                            */
                /* -------------------------------------------------------------------------- */

                const completedTaskChartInit = () => {
                    const { getColor, getData, getDates, resize } = window.phoenix.utils;

                    const $totalSalesChart = document.querySelector(
                        '.echart-completed-task-chart'
                    );

                    const dates = getDates(
                        new Date('5/1/2022'),
                        new Date('5/30/2022'),
                        1000 * 60 * 60 * 24
                    );

                    const currentMonthData = [
                        50, 115, 180, 180, 180, 150, 120, 120, 120, 120, 120, 240, 240, 240, 240,
                        270, 300, 330, 360, 390, 340, 290, 310, 330, 350, 320, 290, 330, 370, 350
                    ];

                    console.log(currentMonthData.length);

                    const prevMonthData = [
                        130, 130, 130, 90, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 110, 170,
                        230, 230, 230, 270, 310, 270, 230, 260, 290, 320, 280, 280, 280
                    ];
                    console.log(prevMonthData.length);

                    const tooltipFormatter = params => {
                        const currentDate = window.dayjs(params[0].axisValue);
                        const prevDate = window.dayjs(params[0].axisValue).subtract(1, 'month');

                        const result = params.map((param, index) => ({
                            value: param.value,
                            date: index > 0 ? prevDate : currentDate,
                            color: param.color
                        }));

                        let tooltipItem = ``;
                        result.forEach((el, index) => {
                            tooltipItem += `<h6 class="fs--1 text-700 ${index > 0 && 'mb-0'
                                }"><span class="fas fa-circle me-2" style="color:${el.color}"></span>
                  ${el.date.format('MMM DD')} : ${el.value}
                </h6>`;
                        });
                        return `<div class='ms-1'>
                          ${tooltipItem}
                        </div>`;
                    };

                    if ($totalSalesChart) {
                        const userOptions = getData($totalSalesChart, 'echarts');
                        const chart = window.echarts.init($totalSalesChart);

                        const getDefaultOptions = () => ({
                            color: [getColor('primary'), getColor('info')],
                            tooltip: {
                                trigger: 'axis',
                                padding: 10,
                                backgroundColor: getColor('gray-100'),
                                borderColor: getColor('gray-300'),
                                textStyle: { color: getColor('dark') },
                                borderWidth: 1,
                                transitionDuration: 0,
                                axisPointer: {
                                    type: 'none'
                                },
                                formatter: tooltipFormatter
                            },
                            xAxis: [
                                {
                                    type: 'category',
                                    data: dates,
                                    axisLabel: {
                                        formatter: value => window.dayjs(value).format('DD MMM'),
                                        interval: 13,
                                        showMinLabel: true,
                                        showMaxLabel: false,
                                        color: getColor('gray-800'),
                                        align: 'left',
                                        fontFamily: 'Nunito Sans',
                                        fontWeight: 600,
                                        fontSize: 12.8
                                    },
                                    axisLine: {
                                        show: true,
                                        lineStyle: {
                                            color: getColor('gray-200')
                                        }
                                    },
                                    axisTick: {
                                        show: false
                                    },
                                    splitLine: {
                                        show: true,
                                        interval: 0,
                                        lineStyle: {
                                            color: getColor('gray-200')
                                        }
                                    },
                                    boundaryGap: false
                                },
                                {
                                    type: 'category',
                                    position: 'bottom',
                                    data: dates,
                                    axisLabel: {
                                        formatter: value => window.dayjs(value).format('DD MMM'),
                                        interval: 130,
                                        showMaxLabel: true,
                                        showMinLabel: false,
                                        color: getColor('gray-800'),
                                        align: 'right',
                                        fontFamily: 'Nunito Sans',
                                        fontWeight: 600,
                                        fontSize: 12.8
                                    },
                                    axisLine: {
                                        show: false
                                    },
                                    axisTick: {
                                        show: false
                                    },
                                    splitLine: {
                                        show: false
                                    },
                                    boundaryGap: false
                                }
                            ],
                            yAxis: {
                                position: 'right',
                                axisPointer: { type: 'none' },
                                axisTick: 'none',
                                splitLine: {
                                    show: false
                                },
                                axisLine: { show: false },
                                axisLabel: { show: false }
                            },
                            series: [
                                {
                                    name: 'd',
                                    type: 'line',
                                    // data: Array.from(Array(30).keys()).map(() =>
                                    //   getRandomNumber(100, 300)
                                    // ),
                                    data: currentMonthData,
                                    showSymbol: false,
                                    symbol: 'circle'
                                },
                                {
                                    name: 'e',
                                    type: 'line',
                                    // data: Array.from(Array(30).keys()).map(() =>
                                    //   getRandomNumber(100, 300)
                                    // ),
                                    data: prevMonthData,
                                    // symbol: 'none',
                                    lineStyle: {
                                        type: 'dashed',
                                        width: 1,
                                        color: getColor('info')
                                    },
                                    showSymbol: false,
                                    symbol: 'circle'
                                }
                            ],
                            grid: {
                                right: 2,
                                left: 5,
                                bottom: '20px',
                                top: '2%',
                                containLabel: false
                            },
                            animation: false
                        });

                        echartSetOption(chart, userOptions, getDefaultOptions);

                        resize(() => {
                            chart.resize();
                        });
                    }
                };

                // import * as echarts from 'echarts';

                const { echarts: echarts$1 } = window;

                /* -------------------------------------------------------------------------- */
                /*                                Roles Split                                */
                /* -------------------------------------------------------------------------- */

                const rolesSplitChartInit = () => {
                    const { getData, getColor, resize } = window.phoenix.utils;
                    const ECHART_ROLES_SPLIT = '.echart-roles-split';
                    const $echartRolesSplit = document.querySelector(ECHART_ROLES_SPLIT);

                    if ($echartRolesSplit) {
                        const userOptions = getData($echartRolesSplit, 'options');
                        const chart = echarts$1.init($echartRolesSplit);

                        const getDefaultOptions = () => ({
                            color: [
                                getColor('primary'),
                                getColor('primary-200'),
                                getColor('info-500')
                            ],

                            tooltip: {
                                trigger: 'item',
                                padding: [7, 10],
                                backgroundColor: getColor('gray-100'),
                                borderColor: getColor('gray-300'),
                                textStyle: { color: getColor('dark') },
                                borderWidth: 1,
                                transitionDuration: 0,
                                formatter: params => {
                                    return `<strong>${params.data.name}:</strong> ${params.value}`;
                                }
                            },
                            legend: { show: false },
                            series: [
                                {
                                    name: 'Roles',
                                    type: 'pie',
                                    radius: ['100%', '87%'],
                                    avoidLabelOverlap: false,
                                    emphasis: {
                                        scale: false,
                                        itemStyle: {
                                            color: 'inherit'
                                        }
                                    },
                                    itemStyle: {
                                        borderWidth: 2,
                                        borderColor: getColor('white')
                                    },
                                    label: {
                                        show: true,
                                        position: 'center',
                                        formatter: '{a}',
                                        fontSize: 23,
                                        color: getColor('dark')
                                    },
                                    data: [
                                        { value: 1, name: '@nameof(RolesEnum.Admin)' },
                                        { value: @totalPMs, name: '@nameof(RolesEnum.ProjectManager)' },
                                        { value: @totalDevelopers, name: '@nameof(RolesEnum.Developer)' },
                                        { value: @totalSubmitters, name: '@nameof(RolesEnum.Submitter)' },
                                    ]
                                }
                            ],
                            grid: { containLabel: true }
                        });

                        echartSetOption(chart, userOptions, getDefaultOptions);

                        resize(() => {
                            chart.resize();
                        });
                    }
                };

                const { docReady } = window.phoenix.utils;
                docReady(completedTaskChartInit);
                docReady(rolesSplitChartInit);



            }));
            //# sourceMappingURL=project-details.js.map

        </script>
    }
</body>

</html>

